<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <meta charset="UTF-8"/>
    <title>Mod List</title>
    <meta name="description" content="Display pack mod list from ATLauncher Node CDN"/>
    <meta name="author" content="Léa Gris"/>
    <meta name="keywords" content="modpack, tool"/>
    <style><![CDATA[
body {font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";}
td, th {
color: rgb(36, 41, 46);
overflow-wrap: break-word;
}
table {
border-collapse: collapse;
}
table.modlist_table td, table.modlist_table th { vertical-align: top }
td, th {
border-spacing: 0px 0px;
border-color: rgb(198, 203, 209);
border-style: solid;
border-width: 1px;
padding: 6px 13px 6px 13px
}
tr:nth-child(even) {background: rgb(246, 248, 250)}
tr:nth-child(odd) {background: rgb(255, 255, 255)}
ul.mod_authors {
  list-style: none;
  margin: 0;
  padding: 0;
}
ul.mod_authors li {
}
.left {text-align:left;}
.center {text-align:center;}
details, summary {display:block;}
summary.modlist_warn::before {
  content: "⚠";
  color: #FFCC00;
  font-weight:800;
  margin-right: 1em;
}
details.modlist_msg {
  margin-left: 4em;
}
details.modlist_msg>div {
  width: 512px;
  font-size: 12px;
  padding: 1em 2em;
  background: #444444;
  color: #dcdcdc;
}
summary.modlist_msg {
  margin-left: -4em;
}
details.modlist_warn>div {
  width: 512px;
  font-size: 12px;
  padding: 1em 2em;
  background: #444444;
  color: #dcdcdc;
}
summary.modlist_warn {
  background: transparent;
  color: #FFCC00;
  font-weight: 800;
}
    ]]></style>
  </head>
  <body>
    <article id="modlist"></article>
    <script type="application/javascript"><![CDATA[
var htmldoc = document.implementation.createHTMLDocument('Document parser');
var foreignHTMLDivNode = htmldoc.createElement("div");

window.onload = function () {
  displayVersion('Beyond Reality: Farscapes', 'devBuild1.11');
}

function createElement(element, attribute, inner) {
  if (typeof(element) === "undefined") {
    return false;
  }
  if (typeof(inner) === "undefined") {
    inner = "";
  }
  var el = document.createElement(element);
  if (typeof(attribute) === 'object') {
    for (var key in attribute) {
      el.setAttribute(key, attribute[key]);
    }
  }
  if (!Array.isArray(inner)) {
    inner = [inner];
  }
  for (var k = 0; k < inner.length; k++) {
    if (inner[k].tagName) {
      el.appendChild(inner[k]);
    }
    else {
      el.appendChild(document.createTextNode(inner[k]));
    }
  }
  return el;
}

function getModsByType(mods, type) {
  var typemods = [];
  for (var mod in mods) {
    if (mods[mod].type == type) {
      typemods.push(mods[mod]);
    }
  }
  return typemods;
}

function getUrlVars() {
  var vars = {};
  var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&#]*)/gi,    
  function(m, key, value) {
    vars[key] = decodeURIComponent(value);
  });
  return vars;
}

function modTR(packver, mods) {
  var modsrows = [];
  mods.forEach(function(mod) {
    var authors = [];
    switch (mod.authors === undefined ? 0 : mod.authors.length) {
      case 0:
        authors.push(createElement("li", {"class":"mod_author_unknown"}, [createElement("i",{} ,"Unknown")]));
      break;
      case 1:
        authors.push(createElement("li", {"class":"mod_author_single"}, mod.authors[0]));
      break;
      default:
        for (k = 0; k < mod.authors.length; k++) {
          authors.push(createElement("li", {"class":"mod_author"},mod.authors[k]));
        }
      break;
    }

    var modwarn = '';
    if (typeof(mod.warning) !== 'undefined'
      && typeof(packver.warnings) !== 'undefined'
      && packver.warnings[mod.warning] !== 'undefined') {
      foreignHTMLDivNode.innerHTML = packver.warnings[mod.warning];
      var modwarn = createElement("details", {"class":"modlist_warn"}, [
        createElement("summary", {"class":"modlist_warn"}, "WARNING"),
        ]);
      modwarn.appendChild(document.importNode(foreignHTMLDivNode, true));

    }
    modsrows.push(createElement("tr", {"id":'mod-' + mod.name.safeCSSId()}, [
      createElement("td", {"class":"left"},
        createElement("a", {"href":mod.website}, mod.name)
      ),
      createElement("td", {"class":"center"}, mod.version),
      createElement("td", {"class":"left"}, createElement("ul", {"class":"mod_authors"}, authors)),
      createElement("td", {"class":"left"}, [mod.description, modwarn]),
    ]));
  });
  return modsrows;
}

Array.prototype.keySort = function(key, desc) {
  this.sort(function(a, b) {
    var result = desc ? (a[key] < b[key]) : (a[key] > b[key]);
    return result ? 1 : -1;
  });
  return this;
}

String.prototype.safeCSSId = function() {
  return encodeURIComponent(this.toLowerCase()).replace(/%[0-9A-F]{2}/gi,'-');
}

String.prototype.capFrst = function() {
  return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
}

PackVersions = function(name, version) {
  this.name = name;
  this.version = version;
  this.url = 'https://download.nodecdn.net/containers/atl/packs/'
    + name.replace(/[\s:_-]*/gi,'')
    + '/versions/'
    + version
    + '/Configs.json';
  this.fetch();
}

PackVersions.prototype = {
  fetch: function() {
    var parent = this;
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", this.url, true);
    xmlhttp.onreadystatechange = function(aEvt) {
      if (xmlhttp.readyState === XMLHttpRequest.DONE && xmlhttp.status == 200) {
//      console.log("responseText:\n" + xmlhttp.responseText);
        try {
          var data = JSON.parse(xmlhttp.responseText);
          parent.data = data;
        }
        catch(err) {
          console.log(err.message + " in " + xmlhttp.responseText);
          return;
        }
        parent.display();
      }
    }.bind(parent);
    xmlhttp.send();
  },

  display: function() {
    if (this.data === undefined) {
      console.log('Fetch first!!!');
      return
    }
    console.log(this.data.mods);
    var renderNode = document.getElementById("modlist");
    var modlist = document.createDocumentFragment();
    var forge = getModsByType(this.data.mods, 'forge')[0];
    console.log(forge);
    var stdmods = getModsByType(this.data.mods, 'mods').keySort('name');
    var depmods = getModsByType(this.data.mods, 'dependency').keySort('name');
    modlist.appendChild(createElement("h1", {"id":"modlist_packtitle"}, this.name));
    modlist.appendChild(createElement("ul", {}, [createElement("li", {}, 'Version: ' + this.version)]));
    modlist.appendChild(createElement("h2", {"id":"modlist_mcversion"}, 'An ATLauncher Mod-pack for Minecraft: ' + this.data.minecraft));
    modlist.appendChild(createElement("h3", {}, 'Powered by'));
    modlist.appendChild(createElement("ul", {}, [
      createElement("li", {}, forge.name + ' ' + forge.version),
      stdmods.length > 0 ?
        createElement("li", {}, createElement("a", {"href":"#modlist_mods"}, stdmods.length + ' Mods'))
        : '',
      depmods.length > 0 ?
        createElement("li", {}, createElement("a", {"href":"#modlist_depend"}, depmods.length + ' Dependency/Core Mods'))
        : ''
    ]));

    if (typeof(this.data.messages) !== 'undefined' && Object.keys(this.data.messages).length > 0) {
      modlist.appendChild(createElement("h2", {"id":"modlist_messages"}, 'Messages'));
      for (msgId in this.data.messages) {
        foreignHTMLDivNode.innerHTML = this.data.messages[msgId];
        var msgfragment = createElement("details", {"class":"modlist_msg"}, [
          createElement("summary", {"class":"modlist_msg","id":'modlist_msg_' + msgId.safeCSSId()}, msgId.capFrst()),
          ]);
        msgfragment.appendChild(document.importNode(foreignHTMLDivNode, true));
        modlist.appendChild(msgfragment);
      }
    }

    if (stdmods.length > 0) {
      modlist.appendChild(createElement("h2", {"id":"modlist_mods"}, 'Mods'));
      modlist.appendChild(createElement("table", {"id":"modlist_stdtable","class":"modlist_table"}, [
        createElement("thead", {}, [
          createElement("tr", {}, [
            createElement("th", {"class":"left"}, 'Mod'),
            createElement("th", {"class":"center"}, 'Version'),
            createElement("th", {"class":"left"}, 'Authors'),
            createElement("th", {"class":"left"}, 'Description')
          ])
        ]),
        createElement("tbody", {}, modTR(this.data, stdmods))
      ]));
    }

    if (depmods.length > 0) {
      modlist.appendChild(createElement("h2", {"id":"modlist_depend"}, 'Dependency/Core Mods'));
      modlist.appendChild(createElement("table", {"id":"modlist_deptable","class":"modlist_table"}, [
        createElement("thead", {}, [
          createElement("tr", {}, [
            createElement("th", {"class":"left"}, 'Mod'),
            createElement("th", {"class":"center"}, 'Version'),
            createElement("th", {"class":"left"}, 'Authors'),
            createElement("th", {"class":"left"}, 'Description')
          ])
        ]),
        createElement("tbody", {}, modTR(this.data, depmods))
      ]));
    }

    renderNode.appendChild(modlist);
  }
  
};

function displayVersion(packname, packversion)
{
  var renderNode = document.getElementById("modlist");
  var urlvars = getUrlVars();
  var anchor = window.location.hash.slice(1);
  
  packname = urlvars["p"] ? urlvars["p"] : packname;
  packversion = urlvars["v"] ? urlvars["v"] : packversion;

  var pack = new PackVersions(packname, packversion);

  renderNode.addEventListener("DOMSubtreeModified", function(e)
    {
      e.target.removeEventListener(e.type, arguments.callee);
      if (typeof(anchor) !== 'undefined' && anchor !== '' ){
        var target = window.document.getElementById(anchor);
        if (target != null) {
          document.getElementById(anchor).scrollIntoView({block: "start", behavior: "instant"});
        }
      }
    }
    , false
  );

}
    ]]></script>
  </body>
</html>
